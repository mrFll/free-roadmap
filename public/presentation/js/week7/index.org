#+Author:
#+TITLE: Week 7

# -*- org-re-reveal-title-slide: nil; org-use-property-inheritance: reveal_; -*-
#+OPTIONS: toc:nil num:0 reveal_single_file:t
#+REVEAL_EXTRA_CSS: extra.css
#+REVEAL_THEME: moon

* Week 7
** Novelty
** Sorting algorithms
- [[https://visualgo.net/en/sorting][VisuAlgo - Sorting (Bubble, Selection, Insertion, Merge, Quick, Counting, Radix)]]
** Selection sort
- Swap
- Sort
** Objects
- defined using ={}=
- are like drawers with labels
- key/value
- property
** Example
#+begin_src js
let user1 = {};
let user2 = { "name": "John", "age": 15 };
let user3 = { "name": "John", "age": 15, "last name": "Smith" };

let user4 = { "name": "John",
              "age": 15,
              "last name": "Smith" };
#+end_src
** Reading values using square brackets
#+begin_src js
let user = { "name": "John", "age": 15, "last name": "Smith" };

user["name"]
user["age"]
#+end_src
** Changing values
** Reading values using square brackets
#+begin_src js
let user = { "name": "John", "age": 15, "last name": "Smith" };

user["age"] = 17;
user["city"] = "Esfahan";
#+end_src
** One word properties
#+begin_src js
let user = { name: "John", age: 15, "last name": "Smith", "my-country": "Iran" };
user.name
user.age
#+end_src
** Array of objects
#+begin_src js
const users = [ { id: 1, name: "Ali"}, {id: 2, name: "Justin"} ];

users.push({ id: 3, name: "John" });

let newUser = { id: 4, name: "James" };
users.push(newUser);
#+end_src
** Objects in Arrays
  #+begin_src js
let cart = [
  { "id": 1, "price": 3000, "type": "food" },
  { "id": 4, "price": 2000, "type": "food" },
  { "id": 8, "price": 1000, "type": "cloth" }
]
  #+end_src
** Arrays in Objects
#+begin_src js
let user = { name: "Justin", hobbies: ["Tennis", "Footbal"] };
#+end_src
** Use in functions
#+begin_src js
function getName(user) {
    return user.name;
}

getName({name: "Samim", city: "Esfahan" });
getName({name: "Ali", city: "Esfahan" });
#+end_src
** Nested objects
#+begin_src js
{
  "id": 1,
  "price": 3000,
  "type": "food",
  "place": { "city": "Esfahan", "country": "Iran" },
  "colors": ["red", "blue"]
}
#+end_src
** JSON
JavaScript Object Notation
** Function to count food in shopping cart
#+begin_src js
let cart = [
  { "id": 1, "price": 3000, "type": "food" },
  { "id": 4, "price": 2000, "type": "food" },
  { "id": 8, "price": 1000, "type": "cloth" }
]
#+end_src
** Switch case
[[https://www.w3schools.com/js/js_switch.asp][- JavaScript Switch Statement]]

#+begin_src js
switch(expression) {
  case x:
    // code block
    break;
  case y:
    // code block
    break;
  default:
    // code block
}
#+end_src

** Switch case example
#+begin_src js
switch(weekday) {
  case 0:
    console.log("Today is Monday");
    break;
  case 1:
    console.log("Today is Tuesday");
    break;
  default:
    console.log("No day");
}
#+end_src
** Assignments :noexport:
- Write
  https://www.jschallenger.com/javascript-objects/access-object-properties
  Create an object with some properties
  Create array of objects with properties
  Function to count items of certain type in array of objects
  number of foods
  number of clothes
  total amount to pay
  average amount

  #+begin_src js
let cart = [
  { "id": 1, "price": 3000, "type": "food", name: "Milk" },
  { "id": 4, "price": 2000, "type": "food", name: "Butter" },
  { "id": 8, "price": 1000, "type": "cloth", name: "Shoes" },
]
  #+end_src

